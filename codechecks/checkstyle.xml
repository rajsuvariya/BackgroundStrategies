<?xml version="1.0"?><!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<!--
    Checkstyle configuration that checks the Google coding conventions from:
    -  Google Java Style
       https://google-styleguide.googlecode.com/svn-history/r130/trunk/javaguide.html
 -->

<module name="Checker">
    <property name="charset" value="UTF-8" />
    <property name="severity" value="error" />
    <!--<property name="fileExtensions" value="java, properties, xml" />-->

    <!--Check that there are no tab characters in source code-->
    <!--To configure the check to report on each line in each file-->
    <module name="FileTabCharacter">
        <property name="eachLine" value="true" />
    </module>

    <module name="TreeWalker">
        <!--Checks that the outer type name and the file name match. For example,
         the class Foo must be in a file named Foo.java.-->
        <module name="OuterTypeFilename" />

        <!--<module name="IllegalTokenText">-->
        <!--&lt;!&ndash;For any character that has a special escape sequence (\b, \t, \n, \f, \r, \", \' and \\),-->
        <!--that sequence is used rather than the corresponding octal (e.g. \012) or Unicode (e.g. \u000a) escape.&ndash;&gt;-->
        <!--<property name="tokens" value="STRING_LITERAL, CHAR_LITERAL" />-->
        <!--<property name="format"-->
        <!--value="\\u00(08|09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)" />-->
        <!--<property name="message" value="Avoid using corresponding octal or Unicode escape." />-->
        <!--</module>-->

        <!--http://checkstyle.sourceforge.net/reports/google-java-style.html#s2.3.3-non-ascii-characters-->
        <!--<module name="AvoidEscapedUnicodeCharacters">-->
        <!--<property name="allowEscapesForControlCharacters" value="true" />-->
        <!--<property name="allowByTailComment" value="true" />-->
        <!--<property name="allowNonPrintableEscapes" value="true" />-->
        <!--</module>-->

        <!--Max line length. Ignores this for the ignorePattern patterns-->
        <!--<module name="LineLength">-->
        <!--<property name="max" value="120" />-->
        <!--<property name="ignorePattern"-->
        <!--value="^package.*|^import.*|a href|href|http://|https://|ftp://" />-->
        <!--</module>-->
        <!--<module name="AvoidStarImport" />-->
        <module name="OneTopLevelClass" />


        <module name="NeedBraces">
            <property name="tokens" value="LITERAL_IF, LITERAL_ELSE"/>
        </module>


        <!--To configure the check to force no line-wrapping in package and import statements (default values)-->
        <!--<module name="NoLineWrap" />-->

        <!--The following cant contain empty blocks. Must have some text-->
        <module name="EmptyBlock">
            <property name="option" value="TEXT" />
            <property name="tokens"
                value="LITERAL_TRY, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_SWITCH" />
        </module>

        <module name="FallThrough">
            <property name="reliefPattern" value="fallthru|falls? ?through"/>
        </module>

        <module name="OneStatementPerLine"/>

        <module name="SimplifyBooleanExpression"/>

        <module name="StringLiteralEquality"/>

        <module name="SuperClone"/>

        <module name="EmptyStatement"/>

        <module name="EqualsAvoidNull"/>

        <module name="AvoidStarImport"/>

        <module name="MultipleVariableDeclarations"/>

        <module name="MissingSwitchDefault"/>

        <!--<module name="NeedBraces" />-->

        <!--Rules for braces K&R style-->
        <!--<module name="LeftCurly">-->
        <!--<property name="maxLineLength" value="120" />-->
        <!--</module>-->
        <!-- -->
        <!--<module name="RightCurly" />-->
        <!--<module name="RightCurly">-->
        <!--<property name="option" value="alone" />-->
        <!--<property name="tokens"-->
        <!--value="CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, LITERAL_DO, STATIC_INIT, INSTANCE_INIT" />-->
        <!--</module>-->

        <!--http://checkstyle.sourceforge.net/reports/google-java-style.html#s4.6.2-horizontal-whitespace-->
        <!--<module name="WhitespaceAround">-->
        <!--<property name="allowEmptyConstructors" value="true" />-->
        <!--<property name="allowEmptyMethods" value="true" />-->
        <!--<property name="allowEmptyTypes" value="true" />-->
        <!--<property name="allowEmptyLoops" value="true" />-->
        <!--<message key="ws.notFollowed"-->
        <!--value="WhitespaceAround: ''{0}'' is not followed by whitespace. Empty blocks may only be represented as '{}' when not part of a multi-block statement (4.1.3)" />-->
        <!--<message key="ws.notPreceded"-->
        <!--value="WhitespaceAround: ''{0}'' is not preceded with whitespace." />-->
        <!--</module>-->

        <!--<module name="OneStatementPerLine" />-->

        <!--Declarations such as int a, b; are not used-->
        <!--<module name="MultipleVariableDeclarations" />-->

        <!--The square brackets form a part of the type, not the variable: String[] args, not String args[]-->
        <!--<module name="ArrayTypeStyle" />-->

        <!--<module name="MissingSwitchDefault" />-->

        <!--Within a switch block, each statement group either terminates abruptly (with a break, continue, return or thrown exception), -->
        <!--or is marked with a comment to indicate that execution will or might continue into the next statement group-->
        <!--<module name="FallThrough" />-->


        <!--Upper L in case of long variables-->
        <!--<module name="UpperEll" />-->

        <!--http://checkstyle.sourceforge.net/reports/google-java-style.html#s4.8.7-modifiers-->
        <!--<module name="ModifierOrder" />-->

        <!--Checks for empty line separators after header, package, all import declarations, fields, constructors, methods, -->
        <!--nested classes, static initializers and instance initializers-->
        <!--<module name="EmptyLineSeparator">-->
        <!--<property name="allowNoEmptyLineBetweenFields" value="true" />-->
        <!--</module>-->

        <!--Dot must go to the new line at line wrap -->
        <!--<module name="SeparatorWrap">-->
        <!--<property name="tokens" value="DOT" />-->
        <!--<property name="option" value="nl" />-->
        <!--</module>-->

        <!--&lt;!&ndash;Comma must be at the end of line for line wrap &ndash;&gt;-->
        <!--<module name="SeparatorWrap">-->
        <!--<property name="tokens" value="COMMA" />-->
        <!--<property name="option" value="EOL" />-->
        <!--</module>-->

        <!--<module name="PackageName">-->
        <!--<property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$" />-->
        <!--<message key="name.invalidPattern"-->
        <!--value="Package name ''{0}'' must match pattern ''{1}''." />-->
        <!--</module>-->

        <!--Validates identifiers for classes, interfaces, enums, and annotations-->
        <!--<module name="TypeName">-->
        <!--<message key="name.invalidPattern"-->
        <!--value="Type name ''{0}'' must match pattern ''{1}''." />-->
        <!--</module>-->
        <!--<module name="MemberName">-->
        <!--<property name="format" value="^m[A-Z][a-zA-Z0-9]*$" />-->
        <!--<message key="name.invalidPattern"-->
        <!--value="Member name ''{0}'' must match pattern ''{1}''." />-->
        <!--</module>-->
        <!--<module name="ParameterName">-->
        <!--<property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$" />-->
        <!--<message key="name.invalidPattern"-->
        <!--value="Parameter name ''{0}'' must match pattern ''{1}''." />-->
        <!--</module>-->
        <!--<module name="LocalVariableName">-->
        <!--<property name="tokens" value="VARIABLE_DEF" />-->
        <!--<property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$" />-->
        <!--<property name="allowOneCharVarInForLoop" value="true" />-->
        <!--<message key="name.invalidPattern"-->
        <!--value="Local variable name ''{0}'' must match pattern ''{1}''." />-->
        <!--</module>-->
        <!--<module name="ClassTypeParameterName">-->
        <!--<property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)" />-->
        <!--<message key="name.invalidPattern"-->
        <!--value="Class type name ''{0}'' must match pattern ''{1}''." />-->
        <!--</module>-->
        <!--<module name="MethodTypeParameterName">-->
        <!--<property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)" />-->
        <!--<message key="name.invalidPattern"-->
        <!--value="Method type name ''{0}'' must match pattern ''{1}''." />-->
        <!--</module>-->

        <!--Verifies there are no finalize() methods defined in a class-->
        <module name="NoFinalizer" />

        <!--<module name="GenericWhitespace">-->
        <!--<message key="ws.followed"-->
        <!--value="GenericWhitespace ''{0}'' is followed by whitespace." />-->
        <!--<message key="ws.preceded"-->
        <!--value="GenericWhitespace ''{0}'' is preceded with whitespace." />-->
        <!--<message key="ws.illegalFollow"-->
        <!--value="GenericWhitespace ''{0}'' should followed by whitespace." />-->
        <!--<message key="ws.notPreceded"-->
        <!--value="GenericWhitespace ''{0}'' is not preceded with whitespace." />-->
        <!--</module>-->

        <!--<module name="Indentation">-->
        <!--<property name="basicOffset" value="2" />-->
        <!--<property name="braceAdjustment" value="0" />-->
        <!--<property name="caseIndent" value="2" />-->
        <!--<property name="throwsIndent" value="4" />-->
        <!--<property name="lineWrappingIndentation" value="4" />-->
        <!--<property name="arrayInitIndent" value="2" />-->
        <!--</module>-->

        <!--<module name="AbbreviationAsWordInName">-->
        <!--<property name="ignoreFinal" value="false" />-->
        <!--<property name="allowedAbbreviationLength" value="1" />-->
        <!--</module>-->

        <!--<module name="OverloadMethodsDeclarationOrder" />-->
        <!-- -->
        <!--<module name="VariableDeclarationUsageDistance" />-->
        <!-- -->
        <!--<module name="CustomImportOrder">-->
        <!--<property name="specialImportsRegExp" value="com.google" />-->
        <!--<property name="sortImportsInGroupAlphabetically" value="true" />-->
        <!--<property name="customImportOrderRules"-->
        <!--value="STATIC###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE###STANDARD_JAVA_PACKAGE" />-->
        <!--</module>-->

        <!--<module name="MethodParamPad" />-->

        <!--<module name="OperatorWrap">-->
        <!--<property name="option" value="NL" />-->
        <!--<property name="tokens"-->
        <!--value="BAND, BOR, BSR, BXOR, DIV, EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR, LT, MINUS, MOD, NOT_EQUAL, PLUS, QUESTION, SL, SR, STAR " />-->
        <!--</module>-->


        <!--<module name="MethodName">-->
        <!--<property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9_]*$" />-->
        <!--<message key="name.invalidPattern"-->
        <!--value="Method name ''{0}'' must match pattern ''{1}''." />-->
        <!--</module>-->
        <!--Comments are indented at the same level as the surrounding code-->
        <!--<module name="CommentsIndentation" />-->
        <module name="EqualsHashCode" />

    </module>
</module>
